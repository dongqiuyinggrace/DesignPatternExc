//Memento(Polymorphism)
    var editor = new Editor();
    var history = new History();
    editor.Title = "1";
    editor.Content = "a";
    history.push(editor.createMemento());

    editor.Title = "2";
    editor.Content = "b";
    history.push(editor.createMemento());


    editor.Title = "3";
    editor.Content = "c";
    history.push(editor.createMemento());

    editor.restore(history.pop());

//StatePattern(Polymorphism)
    var canvas = new Canvas();
    canvas.setCurrentTool(new EraserTool());
    canvas.MouseDown();
    canvas.MouseUp();

//IteratorPattern(Polymorphism)
    var history = new BrowseHistory();
    history.push("a");
    history.push("b");
    history.push("c");

    Iterator iterator = history.createIterator();
    while(iterator.hasNext()) 
    {
        System.Console.WriteLine(iterator.current());
        iterator.next();
    }

//Strategy(Polymorphism)
    var imageStorage = new ImageStorage();
    imageStorage.Store("fileName: a", new JpgCompressor(), new BWFilter());
    imageStorage.Store("fileName: b", new PngCompressor(), new ContrastFilter());

//Template(Inheritance)
    var transferMoneyTask = new TransferMoneyTask();
    transferMoneyTask.Execute();
    var generateTask = new GenerateReport();
    generateTask.Execute();

//CommandPattern
    //var service = new CustomerService();
    //var command = new AddCustomerCommand(service);
    //var button = new Button(command);
    // button.click();

    //var commands = new CompositeCommand();
    //commands.Add(new ResizeCommand());
    //commands.Add(new BalckAndWhiteCommand());
    //commands.Execute();

    var history = new DesignPatternExc.src.CommandPattern.editor.History();
    var document = new HtmlDocument("Hello World");
    var boldCommand = new BoldCommand(history, document);
    boldCommand.Execute();
    System.Console.WriteLine(document.Content);
    var undoComand = new UndoCommand(history);
    undoComand.Execute();
    System.Console.WriteLine(document.Content);

//ObserverPattern
    var data = new DataSource();
    var chart = new Chart(data);
    var sheet1 = new SpreadSheet(data);
    var sheet2 = new SpreadSheet(data);
    
    data.AddObserver(chart);
    data.AddObserver(sheet1);
    data.AddObserver(sheet1);

    data.Value = 5;

//Mediator
    var articleDialog = new ArticleDialog();
    articleDialog.SimulateChanges();

//ChainOfResponsibilityPattern
    var compressor = new Compressor(null);
    var logger = new Logger(compressor);
    var authenticator = new Authenticator(logger);

    var webServer = new WebServer(authenticator);
    webServer.Handle(new HttpRequest("Admin", "1234"));

//VisitorPattern
    var headingNode = new HeadingNode();
    var achorNode = new AchorNode();
    var htmlDocument = new HtmlDocument();
    htmlDocument.AddNode(headingNode);
    htmlDocument.AddNode(achorNode);
    htmlDocument.Execute(new PlainTextOperation());
    htmlDocument.Execute(new HighLightOperation());

//CompositePattern
    var shape1 = new Shape();
    var shape2 = new Shape();

    var shape3 = new Shape();
    var shape4 = new Shape();

    var group1 = new Group();
    group1.Add(shape1);
    group1.Add(shape2);

    var group2 = new Group();
    group2.Add(shape3);
    group2.Add(shape4);

    var group = new Group();
    group.Add(group1);
    group.Add(group2);
    group.Render();
    group.Move();

//AdapterPattern
    var imageView = new ImageView(new Image());
    imageView.Apply(new CaramelFilter(new Caramel()));
    imageView.Apply(new CaramelAdapter());

//DecoratorPattern
    static void Main(string[] args)
    {
        StoreCreditCard(new CompressedStream(new EncryptCloudStream(new CloudStream())));
    }

    static void StoreCreditCard(IStream stream)
    {
        stream.Write("1234-1234-1234");
    }